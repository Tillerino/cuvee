(set-logic ALL)

(declare-sort Elem 0)
(declare-sort Lst 0)

(declare-const dash Elem)

(declare-const nil Lst)
(declare-fun   cons (Elem Lst) Lst)

(assert (forall ((x Elem) (xs Lst))
    (not (= nil (cons x xs)))))

(declare-fun rmdash (Lst) Lst)
(assert
    (= (rmdash nil)
       nil))
(assert (forall ((x Elem) (xs Lst))
    (= (rmdash (cons x xs))
       (ite (= x dash) (rmdash xs)
                       (cons x (rmdash xs))))))

(declare-fun tolist ((Array Int Elem) Int Int) Lst)
(assert (forall ((a (Array Int Elem)) (n Int))
  (= (tolist a n n)
     nil)))
(assert (forall ((a (Array Int Elem)) (i Int) (n Int))
  (=> (< i n)
      (= (tolist a i n)
         (cons (select a i) (tolist a (+ i 1) n))))))

(declare-const a (Array Int Elem))
(declare-const i Int)
(declare-const j Int)

(declare-const b (Array Int Elem))
(declare-const m Int)
(declare-const n Int)

(declare-const ok Bool)

(assert-counterexample
  (and (and (<= 0 i) (<= i m))
       (and (<= 0 j) (<= j n)))
  (while (and b (or (< i m) (< j n)))
  )
  (= b (= (rmdash (tolist a (old i) m)
          (rmdash (tolist b (old j) n))))))
                   

  val pre = 0 <= i && i <= m && 0 <= j && j <= n
  val post = b === (rmdash(tolist(A, Old(i), m)) === rmdash(tolist(B, Old(j), n)))

  val prog = Block(
    b := True,
    WhileContract(
      pre = b && pre, // && (!b ==> !((A select i) === (B select j))),
      term = (m + n) - (i + j),
      While(
        b && (i < m || j < n),
        If(
          (i < m) && ((A select i) === dash),
          i := i + 1,
          If(
            (j < n) && ((B select j) === dash),
            j := j + 1,
            If(
              (i < m && j < n) && ((A select i) === (B select j)),
              Block(
                i := i + 1,
                j := j + 1),
              Block(
                b := False,
                Assert(post),
                Assume(False)))))),
      post))

