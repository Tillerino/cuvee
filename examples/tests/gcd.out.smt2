(set-logic ALL)
(declare-fun m () Int)
(declare-fun n () Int)
(declare-fun gcd (Int Int) Int)
(push 1)
(assert (forall ((m Int)) (= (gcd m m) m)))
(assert (forall ((m Int) (n Int)) (=> (< m n) (= (gcd m n) (gcd m (- n m))))))
(assert (forall ((m Int) (n Int)) (=> (> m n) (= (gcd m n) (gcd (- m n) n)))))

(assert (not (=> (and (< 0 m) (< 0 n)) (and (and (and (and (< 0 m) (< 0 n))
            (forall ((m2 Int)) (=> (and (< 0 m2) (= m2 (gcd m n))) (and (< 0 m2) (= m2 (gcd m n))))))
        (forall ((n1 Int) (m2 Int)) (=> (and (not (not (= m2 n1))) (and (< 0 m2) (< 0 n1))) (and (< 0 m2) (= m2 (gcd m2 n1))))))
    (forall ((n1 Int) (m2 Int)) (=> (and (not (= m2 n1)) (and (< 0 m2) (< 0 n1)))
        (and (=> (< m2 n1) (and (and (=> (not (= m2 (- n1 m2)))
                        (and (<= 0 (+ m2 (- n1 m2))) (< (+ m2 (- n1 m2)) (+ m2 n1))))
                    (< 0 m2) (< 0 (- n1 m2)))
                (forall ((n3 Int) (m4 Int)) (=> (and (not (not (= m4 n3))) (< 0 m4) (= m4 (gcd m2 (- n1 m2))))
                    (and (< 0 m4) (= m4 (gcd m2 n1)))))))
            (=> (not (< m2 n1)) (and (and (=> (not (= (- m2 n1) n1)) (and (<= 0 (+ (- m2 n1) n1)) (< (+ (- m2 n1) n1) (+ m2 n1))))
                    (< 0 (- m2 n1)) (< 0 n1))
                (forall ((n5 Int) (m6 Int)) (=> (and (not (not (= m6 n5))) (< 0 m6) (= m6 (gcd (- m2 n1) n1)))
                    (and (< 0 m6) (= m6 (gcd m2 n1))))))))))))))
(check-sat)
(pop 1)
